
//Get the arrays of ingredients from JSON files which are generated by PHP and contain the mySQL data

var proteinsfull = [];
$.getJSON('./data/proteins.json', function(prot){
    proteinsfull = prot;
});

var veggiesfull = []; 
$.getJSON('./data/veggies.json', function(veg){
    veggiesfull = veg;
});

var carbsfull = [];
$.getJSON('./data/carbs.json', function(car){
    carbsfull = car;
});


//Get the array of preparations from the JSON file

var preparationsfull = [];
$.getJSON('./data/preparations.json', function(prep){
    preparationsfull = prep;
})


//Store the value of the user entered preferred ingredients if this is only text

var errormessage;
var contains = [];

function mustContain() {
    var reg = new RegExp('^[a-zA-Z ]+$');
    var containsStr = $("#contains").val();
    if (reg.test(containsStr)){
        contains = containsStr.toLowerCase().split(" ");
    }
    else if (containsStr == ""){
        contains = "";
    }
    else{
        alert(errormessage);
        $("#contains").val("");
    }
    return contains;
}


//Check on selected language and give back the correct array of ingredients

function checkLanguage() {
    if ($('#pickLanguage input[type=radio]:checked').attr('id') == 'nl'){
        carbs = carbsfull[2];
        veggies = veggiesfull[2];
        proteins = proteinsfull[2];
        preparations = preparationsfull[2];
        errormessage = "Foutje! Je mag alleen tekst invoeren."
    }
    else{
        carbs = carbsfull[1];
        veggies = veggiesfull[1];
        proteins = proteinsfull[1];
        preparations = preparationsfull[1];
        errormessage = "Sorry, only text allowed!"
    }
}


//Create random carbs plus a preparation

var rCarbs;
var rPrep;
var correspCarbs = [];

function randomCarbs() {
    checkLanguage();

//Check on ingredients the recipe must contain, otherwise pick random one
    correspCarbs = carbs.filter(function(v){
        return mustContain().indexOf(v) > -1;
    });
    if (mustContain() == "" || correspCarbs.length < 1) {
        rCarbs = carbs[Math.floor(Math.random() * carbs.length)];
    }
    else if (correspCarbs.length == 1) {
        rCarbs = correspCarbs.toString();
    }
    else {
        rCarbs = correspCarbs[Math.floor(Math.random() * correspCarbs.length)];
    }
    
//Determine preparation based on the selected ingredient
    if (rCarbs == "aardappels" || rCarbs == "potatoes"){
        rPrep = preparations[Math.floor(Math.random() * preparations.length)];
        return rPrep + " " + rCarbs;
    }
    else{
        rPrep = "";
        return rCarbs;
    }
}


//Create random veggies

var cVeggies = [];
var rVeggies;

function randomVeggies() {
    checkLanguage();
    rVeggies = [];
    var nv;

//Check on ingredients the recipe must contain and add these to the array, otherwise pick random ones
    cVeggies = veggies.filter(function(w){
        return mustContain().indexOf(w) > -1;
    });
    if (mustContain() == "" || cVeggies.length < 1){
        nv = Math.floor(Math.random() * 7) + 1;
    }
    else if (cVeggies.length < 8) {
        nv = Math.floor(Math.random() * (7 - cVeggies.length)) + 1;
        rVeggies = rVeggies.concat(cVeggies);
    }
    else {
        rVeggies = cVeggies[Math.floor(Math.random() * 7) + 1];
    }
    
//Add ingredient one by one if it has not been added already
    for (var i = 0; i < nv; i++){
        rv = veggies[Math.floor(Math.random() * veggies.length)];
        if (rVeggies.indexOf(rv) == -1){
            rVeggies.push(rv);
        }
        else{
            continue;
        }
    }
    if (rVeggies.length > 0){
        if ($('#pickLanguage input[type=radio]:checked').attr('id') == 'nl'){
            return rVeggies.slice(0, rVeggies.length - 1).join(", ") + " en " + rVeggies.slice(-1);
        }
        else{
            return rVeggies.slice(0, rVeggies.length - 1).join(", ") + " and " + rVeggies.slice(-1);
        }
    }
    else{
        return rVeggies.join(" ");
    }
}


//Create random proteins

var cProteins = [];
var rProteins;

function randomProteins() { 
    checkLanguage();
    rProteins = [];
    var np;

//Check on ingredients the recipe must contain and add these to the array, otherwise pick random ones
    cProteins = proteins.filter(function(u){
        return mustContain().indexOf(u) > -1;
    });
    if (mustContain() == "" || cProteins.length < 1){
        np = Math.floor(Math.random() * 2) + 1;
    }
    else if (cProteins.length == 1){
        np = Math.floor(Math.random() + 1);
        rProteins.push(cProteins.toString());
    }
    else {
        rProteins = cProteins[Math.floor(Math.random() * 2) + 1];
    }

//Check on preference vegetarian
    if ($("#prefs option:selected").text() == "Vegetarian" || $("#prefs option:selected").text() == "Vegetarisch"){
        proteins.splice(3, 3);
    }

//Add ingredient one by one if it has not been added already
    for (var i = 0; i < np; i++){
        rp = proteins[Math.floor(Math.random() * proteins.length)];
        if (rProteins.indexOf(rp) == -1) {
                rProteins.push(rp);
        }
        else{
            continue;
        }
    }
    return rProteins.join(", ");
}


//Translate carbs into two different strings to show in favourites list

var rCarbsNl;
var rCarbsEn;

function translateCarbs() {
    if (carbs == carbsfull[2]){
        rCarbsNl = rCarbs;
        rCarbsEn = carbsfull[1][(carbsfull[2].indexOf(rCarbs))];
    }
    else{
        rCarbsEn = rCarbs;
        rCarbsNl = carbsfull[2][(carbsfull[1].indexOf(rCarbs))];
    }
}


//Translate preparation into two different strings to show in favourites list

var rPrepNl;
var rPrepEn;

function translatePrep() {
    if (preparations == preparationsfull[2]){
        rPrepNl = rPrep;
        rPrepEn = preparationsfull[1][(preparationsfull[2].indexOf(rPrep))];
    }
    else{
        rPrepEn = rPrep;
        rPrepNl = preparationsfull[2][(preparationsfull[1].indexOf(rPrep))];
    }
}

//Translate veggies into two different arrays to show in favourites list

var rVeggiesNl = [];
var rVeggiesEn = [];

function translateVeggies() {
    if (veggies == veggiesfull[2]){ 
        rVeggiesNl = rVeggies;
        rVeggies.forEach(function(vegEn){
            rVeggiesEn.push(veggiesfull[1][(veggiesfull[2].indexOf(vegEn))]);
        });
    }
    else {
        rVeggiesEn = rVeggies;
        rVeggies.forEach(function(vegNl){
            rVeggiesNl.push(veggiesfull[2][(veggiesfull[1].indexOf(vegNl))]);
        });
    }
}


//Translate proteins into two different arrays to show in favourites list

var rProteinsNl = [];
var rProteinsEn = [];

function translateProteins() {
    if (proteins == proteinsfull[2]){
        rProteinsNl = rProteins;
        rProteins.forEach(function(protEn){
            rProteinsEn.push(proteinsfull[1][(proteinsfull[2].indexOf(protEn))]);
        });
    }
    else {
        rProteinsEn = rProteins;
        rProteins.forEach(function(protNl){
            rProteinsNl.push(proteinsfull[2][(proteinsfull[1].indexOf(protNl))]);
        });
    }
}


//Combine carbs, veggies and proteins

var string;
var finalStr;

function combineIngr() {
    if ($('#pickLanguage input[type=radio]:checked').attr('id') == 'nl'){
        string = (randomCarbs() + " met " + randomProteins() + ", " + randomVeggies());
    }
    else{
        string = (randomCarbs() + " with " + randomProteins() + ", " + randomVeggies());
    }
    return finalStr = string.charAt(0).toUpperCase() + string.slice(1);
};


//Show the recipe and make the icons empty

function showRecipe() {
    $("#recipe").css("display", "block").html(combineIngr());
    $(".iconspan").addClass("show");
    $(".iconspan .fas").removeClass("fas").addClass("far");
//Cancel default button behaviour to refresh page  
    return false;
}


//Toggle the like and add the recipe to the database

var rating;
var proteins_str;
var veggies_str;

$(".iconspan i").click(function(){
    translateCarbs();
    translateVeggies();
    translateProteins();
    translatePrep();
    proteins_en = rProteinsEn.join(", ");
    proteins_nl = rProteinsNl.join(", ");
    veggies_en = rVeggiesEn.join(", ");
    veggies_nl = rVeggiesNl.join(", ");
    $(this).toggleClass("far fas");
    $(this).siblings().removeClass("fas").addClass("far");
    if ($(".fa-thumbs-up").hasClass("fas")){
        rating = 1;
        $.post("./thumbs.php",
            {recipe:finalStr, rprep_en:rPrepEn, rprep_nl:rPrepNl, rcarbs_en:rCarbsEn, rcarbs_nl:rCarbsNl, rproteins_en:proteins_en, rproteins_nl:proteins_nl, rveggies_en:veggies_en, rveggies_nl:veggies_nl, rating:rating}
        );
    }
    else if ($(".fa-thumbs-down").hasClass("fas")){
        rating = -1;
        $.post("./thumbs.php",
            {recipe:finalStr, rprep_en:rPrepEn, rprep_nl:rPrepNl, rcarbs_en:rCarbsEn, rcarbs_nl:rCarbsNl, rproteins_en:proteins_en, rproteins_nl:proteins_nl, rveggies_en:veggies_en, rveggies_nl:veggies_nl, rating:rating}
        );
    }
});


//Translate the HTML content

$('#pickLanguage input[type=radio]').change(function(){
    var langId = $(this).attr('id');
    if (langId == 'nl'){
        $.getJSON('./languages/nl.json', translate);
    }
    else{
        $.getJSON('./languages/en.json', translate);
    }
});

var langKey = $('[langkey]');

function translate(translations){
    $.each(langKey, function(){
        var content = translations[$(this).attr('langkey')];
        $(this).html(content);
    });
}